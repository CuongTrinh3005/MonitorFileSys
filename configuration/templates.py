# Define your templates here

data = {
    "start_timestamp": "2018-04-01T20:14:37.808587Z",
    "end_timestamp": "2018-05-05T20:14:37.808587Z",
    "smart_contracts": [
        {
            "smart_contract_version_id": "1000",
            "smart_contract_param_vals": {
                "denomination": "[\"GBP\", \"HKD\"]",
                "interest_rate": "0.05",
                "partner_interest_income_gl": "partner_interest_income_gl",
                "partner_accrued_interest_gl": "partner_accrued_interest_gl",
                "partner_gl": "partner_gl",
                "total_days": "365",
                "accrue_digits": "5",
                "apply_digits": "2"
            },
            "code": "display_name = 'Exersice for smart contract assessment'\napi = '3.8.0'\nversion = '0.0.1'\nsummary = 'Smart Contract APIs Exercise for applying interest'\ndescription = 'This is the test for beginners in the learning Smart Contract career path'\ntside = Tside.LIABILITY\n\n# Params' names\n# Template\nACCRUE_DIGITS = 'accrue_digits'\nAPPLY_DIGITS = 'apply_digits'\nDENOMINATION = 'denomination'\nINTEREST_RATE = 'interest_rate'\nTOTAL_DAYS = 'total_days'\n\n# Related to GLs\nPARTNER_GL = 'partner_gl'\nPARTNER_ACCRUED_INTEREST_GL = \"partner_accrued_interest_gl\"\nPARTNER_INTEREST_INCOME_GL = \"partner_interest_income_gl\"\n\n# Default values\nDEFAULT_DENOMINATION = ['GBP', 'HKD']\nDEFAULT_INTEREST_RATE = 0.0\nDEFAULT_TOTAL_DAYS = 365\nDEFAULT_ACCRUE_DIGITS = 5\nDEFAULT_APPLY_DIGITS = 2\n\n# Addresses\nINTERNAL = 'INTERNAL'\nACCRUED_INCOMING_ADDRESS = 'ACCRUED_INCOMING_ADDRESS'\n\n# Events\nACCRUED_INTEREST = 'RECORD_ACCRUED_INTEREST'\nAPPLY_ACCRUED_INTEREST = 'APPLY_ACCRUED_INTEREST'\nREBALANCING = 'RE-BALANCING'\n\n# Effect\nCUSTOMER = 'CUSTOMER'\nBANK = 'BANK'\n\n# Parameters\nparameters = [\n    Parameter(\n        name=ACCRUE_DIGITS,\n        shape=NumberShape(\n            kind=NumberKind.PLAIN,\n            min_value=1,\n            max_value=5,\n            step=1\n        ),\n        level=Level.TEMPLATE,\n        description='Constraint of floating-point amount of money to accrue',\n        display_name='Constraint of floating-point amount of money to accrue',\n    ),\n    Parameter(\n        name=APPLY_DIGITS,\n        shape=NumberShape(\n            kind=NumberKind.PLAIN,\n            min_value=1,\n            max_value=3,\n            step=1\n        ),\n        level=Level.TEMPLATE,\n        description='Constraint of floating-point amount of money to apply interest',\n        display_name='Constraint of floating-point amount of money to apply interest',\n    ),\n    Parameter(\n        name=DENOMINATION,\n        shape=DenominationShape,\n        level=Level.TEMPLATE,\n        description='Default denomination',\n        display_name='Test denomination parameter'\n    ),\n    Parameter(\n        name=INTEREST_RATE,\n        shape=NumberShape(\n            kind=NumberKind.PERCENTAGE, min_value=0, max_value=1, step=0.01),\n        level=Level.TEMPLATE,\n        display_name='Interest Rate',\n        description='Rate paid on positive balances'\n    ),\n    Parameter(\n        name=PARTNER_INTEREST_INCOME_GL,\n        description='Internal Account used for receiving the accrual interest',\n        display_name='Partner Interest Income GL',\n        level=Level.TEMPLATE,\n        shape=AccountIdShape\n    ),\n    Parameter(\n        name=PARTNER_ACCRUED_INTEREST_GL,\n        description='Internal Account used for sending the accrual interest',\n        display_name='Partner Accrued Interest GL',\n        level=Level.TEMPLATE,\n        shape=AccountIdShape\n    ),\n    Parameter(\n        name=PARTNER_GL,\n        description='Internal Account used for officially paying interest amount for customer',\n        display_name='Partner GL',\n        level=Level.TEMPLATE,\n        shape=AccountIdShape\n    ),\n    Parameter(\n        name=TOTAL_DAYS,\n        level=Level.TEMPLATE,\n        description=\"Total days in one year to calculate interest\",\n        display_name='Total days in one year',\n        shape=NumberShape(\n            min_value=364,\n            max_value=366,\n            step=1,\n        )\n    )\n]\n\n\ndef execution_schedules():\n    return [\n        (\n            'ACCRUE_INTEREST', {\n                'hour': '00',\n                'minute': '00',\n                'second': '00'\n            }\n        ),\n        (\n            'APPLY_ACCRUED_INTEREST', {\n                'hour': '01',\n                'minute': '00',\n                'second': '00'\n            }\n        )\n    ]\n\n\n@requires(parameters=True)\ndef pre_posting_code(postings, effective_date):\n    denomination_list = _get_list_denominations(vault)\n    if any(posting.denomination not in denomination_list for posting in postings):\n        raise Rejected(\n            'Cannot make transactions in given denomination; '\n            'transactions must be in {}'.format(denomination_list),\n            reason_code=RejectedReason.WRONG_DENOMINATION,\n        )\n\n\n@requires(event_type='ACCRUE_INTEREST', parameters=True, balances='1 day')\n@requires(event_type='APPLY_ACCRUED_INTEREST', parameters=True, balances='1 day')\ndef scheduled_code(event_type, effective_date):\n    if event_type == 'ACCRUE_INTEREST':\n        _accrue_interest(vault, effective_date)\n    elif event_type == 'APPLY_ACCRUED_INTEREST':\n        _apply_accrued_interest(vault, effective_date)\n\n# Helper functions\n\n\ndef _accrue_interest(vault, time_effective):\n    denomination_list = _get_list_denominations(vault)\n    # Get the balance at the end of the previous day\n    balances = vault.get_balance_timeseries().at(timestamp=time_effective)\n    for denomination in denomination_list:\n        effective_balance = balances[(DEFAULT_ADDRESS, DEFAULT_ASSET, denomination, Phase.COMMITTED)].net\n        if effective_balance > 0:\n            try:\n                interest_rate = vault.get_parameter_timeseries(\n                    name=INTEREST_RATE\n                ).latest()\n                _validate_interest(interest_rate)\n            except:\n                interest_rate = DEFAULT_INTEREST_RATE\n\n            try:\n                total_days = vault.get_parameter_timeseries(name=TOTAL_DAYS).latest()\n                if total_days <= 0:\n                    raise ValueError(\"Total days of year must be larger than 0\")\n                _validate_positive_int(total_days, min_val=1, max_val=366)\n            except:\n                total_days = DEFAULT_TOTAL_DAYS\n\n            daily_rate = interest_rate / total_days\n            daily_rate_percent = daily_rate * 100\n            amount_to_accrue = _precision_accrual(vault, effective_balance * daily_rate)\n\n            if amount_to_accrue > 0:\n                # Credit ACCRUED_INCOMING_ADDRESS - debit INTERNAL of CASA\n                posting_ins = vault.make_internal_transfer_instructions(\n                    amount=amount_to_accrue,\n                    denomination=denomination,\n                    client_transaction_id='CALCULATE_{}_ACCRUED_INTEREST_{}'.format(\n                        vault.get_hook_execution_id(), denomination),\n                    from_account_id=vault.account_id,\n                    from_account_address=INTERNAL,\n                    to_account_id=vault.account_id,\n                    to_account_address=ACCRUED_INCOMING_ADDRESS,\n                    instruction_details={\n                        'description': 'Daily interest accrued at %0.5f%% on balance of %0.2f' %\n                                       (daily_rate_percent, effective_balance),\n                        'event': ACCRUED_INTEREST + \"_\" + CUSTOMER\n                    },\n                    asset=DEFAULT_ASSET\n                )\n\n                # Credit partner interest income GL - debit partner accrued interest GL\n                partner_interest_income_gl = vault.get_parameter_timeseries(name=PARTNER_INTEREST_INCOME_GL).latest()\n                partner_accrued_interest_gl = vault.get_parameter_timeseries(name=PARTNER_ACCRUED_INTEREST_GL).latest()\n\n                posting_ins.extend(\n                    vault.make_internal_transfer_instructions(\n                        amount=amount_to_accrue,\n                        denomination=denomination,\n                        from_account_id=partner_accrued_interest_gl,\n                        from_account_address=DEFAULT_ADDRESS,\n                        to_account_id=partner_interest_income_gl,\n                        to_account_address=DEFAULT_ADDRESS,\n                        asset=DEFAULT_ASSET,\n                        client_transaction_id='RECORD_ACCRUED_INTEREST_BANK_{}_{}'.format(\n                            vault.get_hook_execution_id(), denomination\n                        ),\n                        instruction_details={\n                            'description': 'Interest Accrued',\n                            'event': ACCRUED_INTEREST + \"_\" + BANK\n                        }\n                    )\n                )\n\n                vault.instruct_posting_batch(\n                    posting_instructions=posting_ins,\n                    effective_date=time_effective,\n                    client_batch_id='BATCH_ACCRUED_INTEREST_{}_{}'.format(\n                        vault.get_hook_execution_id(), denomination\n                    )\n                )\n\n\ndef _apply_accrued_interest(vault, time_effective):\n    denomination_list = _get_list_denominations(vault)\n    latest_bal_by_addr = vault.get_balance_timeseries().at(timestamp=time_effective)\n\n    for denomination in denomination_list:\n        incoming_accrued = latest_bal_by_addr[\n            (ACCRUED_INCOMING_ADDRESS, DEFAULT_ASSET, denomination, Phase.COMMITTED)\n        ].net\n        amount_to_be_paid = _precision_apply(vault, incoming_accrued)\n\n        # Fulfil any incoming interest into the account\n        if amount_to_be_paid > 0:\n            partner_interest_income_gl = vault.get_parameter_timeseries(name=PARTNER_INTEREST_INCOME_GL).latest()\n            partner_accrued_interest_gl = vault.get_parameter_timeseries(name=PARTNER_ACCRUED_INTEREST_GL).latest()\n            partner_gl = vault.get_parameter_timeseries(name=PARTNER_GL).latest()\n\n            posting_ins = vault.make_internal_transfer_instructions(\n                amount=amount_to_be_paid,\n                denomination=denomination,\n                from_account_id=partner_gl,\n                from_account_address=DEFAULT_ADDRESS,\n                to_account_id=vault.account_id,\n                to_account_address=DEFAULT_ADDRESS,\n                asset=DEFAULT_ASSET,\n                client_transaction_id='OFFICIAL_APPLY_ACCRUED_INTEREST_CUSTOMER_{}_{}'.format(\n                    vault.get_hook_execution_id(), denomination\n                ),\n                instruction_details={\n                    'description': 'Interest Applied',\n                    'event': APPLY_ACCRUED_INTEREST\n                }\n            )\n\n            posting_ins.extend(\n                vault.make_internal_transfer_instructions(\n                    amount=amount_to_be_paid,\n                    denomination=denomination,\n                    from_account_id=vault.account_id,\n                    from_account_address=ACCRUED_INCOMING_ADDRESS,\n                    to_account_id=vault.account_id,\n                    to_account_address=INTERNAL,\n                    asset=DEFAULT_ASSET,\n                    client_transaction_id='RECORD_APPLY_ACCRUED_INTEREST_CUSTOMER_{}_{}'.format(\n                        vault.get_hook_execution_id(), denomination\n                    ),\n                    instruction_details={\n                        'description': 'Re-balancing Interest Applied',\n                        'event': APPLY_ACCRUED_INTEREST + \"_\" + REBALANCING\n                    }\n                )\n            )\n\n            posting_ins.extend(\n                vault.make_internal_transfer_instructions(\n                    amount=amount_to_be_paid,\n                    denomination=denomination,\n                    from_account_id=partner_interest_income_gl,\n                    from_account_address=DEFAULT_ADDRESS,\n                    to_account_id=partner_accrued_interest_gl,\n                    to_account_address=DEFAULT_ADDRESS,\n                    asset=DEFAULT_ASSET,\n                    client_transaction_id='RECORD_APPLY_ACCRUED_INTEREST_BANK_{}_{}'.format(\n                        vault.get_hook_execution_id(), denomination\n                    ),\n                    instruction_details={\n                        'description': 'Interest Applied',\n                        'event': APPLY_ACCRUED_INTEREST\n                    }\n                )\n            )\n\n            # instructions to apply interest and optional reversal of remainder must be executed\n            # in a batch to ensure the overall transaction is atomic\n            vault.instruct_posting_batch(\n                posting_instructions=posting_ins,\n                effective_date=time_effective,\n                client_batch_id='BATCH_APPLY_ACCRUED_INTEREST_{}_{}'.format(\n                    vault.get_hook_execution_id(), denomination\n                )\n            )\n\n\ndef _truncate_decimal(value, num_digits):\n    stepper = 10.0 ** num_digits\n    return math.trunc(stepper * value) / stepper\n\n\ndef _precision_accrual(vault, amount):\n    try:\n        digits = vault.get_parameter_timeseries(name=ACCRUE_DIGITS).latest()\n        _validate_positive_int(digits, min_val=0, max_val=7, name='Decimal for accrue')\n    except:\n        digits = DEFAULT_ACCRUE_DIGITS\n\n    return _truncate_decimal(value=amount, num_digits=digits)\n\n\ndef _precision_apply(vault, amount):\n    try:\n        digits = vault.get_parameter_timeseries(name=APPLY_DIGITS).latest()\n        _validate_positive_int(digits, min_val=0, max_val=4, name='Decimal for accrue')\n    except:\n        digits = DEFAULT_APPLY_DIGITS\n\n    return _truncate_decimal(value=amount, num_digits=digits)\n\n\ndef _get_list_denominations(vault):\n    try:\n        denomination_str = vault.get_parameter_timeseries(name=DENOMINATION).latest()\n        only_chars = denomination_str.replace(\"[^\\\\p{IsAlphabetic}\\\\p{IsDigit}]\", \"\")\n        only_chars = only_chars[1:len(only_chars)]\n        deno_split = only_chars.split(\",\")\n\n        denomination_list = []\n        for deno in deno_split:\n            denomination_list.append(deno.replace(\"[\", \"\").replace(\"]\", \"\").replace('\"', \"\").strip())\n    except:\n        denomination_list = DEFAULT_DENOMINATION\n    return denomination_list\n\n\ndef _validate_positive_int(value, min_val=0, max_val=0, name='Value '):\n    is_positive_int = str(value).isdigit()\n    if not is_positive_int:\n        raise ValueError(f\"{name} must be a positive number\")\n    if value < min_val or value > max_val:\n        raise ValueError(f\"{name} must be in range[{min_val}, {max_val}]\")\n\n\ndef _validate_interest(value, min_val=0, max_val=1):\n    if value < 0 or (value < min_val or value > max_val):\n        raise ValueError(\"Interest rate must be in range [{min_val}, {max_val}]\")\n"
        },
        {
            "code": "api = '3.8.0'\nversion = '0.0.1'\ntside = Tside.LIABILITY",
            "smart_contract_version_id": "1001"
        }
    ],
    "instructions": [
        {
            "timestamp": "2018-04-10T20:14:37.808587Z",
            "create_account": {
                "id": "Main",
                "product_version_id": "1000"
            }
        },
        {
            "timestamp": "2018-04-10T20:14:37.808587Z",
            "create_account": {
                "id": "partner_interest_income_gl",
                "product_version_id": "1001"
            }
        },
        {
            "timestamp": "2018-04-10T20:14:37.808587Z",
            "create_account": {
                "id": "partner_accrued_interest_gl",
                "product_version_id": "1001"
            }
        },
        {
            "timestamp": "2018-04-10T20:14:37.808587Z",
            "create_account": {
                "id": "partner_gl",
                "product_version_id": "1001"
            }
        },
        {
            "timestamp": "2018-04-11T20:14:37.808587Z",
            "create_posting_instruction_batch": {
                "client_id": "1",
                "client_batch_id": "1",
                "posting_instructions": [
                    {
                        "client_transaction_id": "22",
                        "inbound_hard_settlement": {
                            "amount": "10000",
                            "denomination": "GBP",
                            "target_account": {
                                "account_id": "Main"
                            },
                            "internal_account_id": "partner_gl"
                        }
                    }
                ],
                "batch_details": {}
            }
        }
    ]
}
